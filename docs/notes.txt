C3PO hat bereits Post-Processing Rules (com.petpet.c3po.adaptor.rules.PostProcessingRule)
	die werden aber eigentlich schon während des Imports der FITS-Daten angewandt, sind also eigentlich Pre-Processing Rules
	(sie werden aber NACH dem parsen der Informationen angewandt - also in dem Kontext sind sie Post-Processing)

Ein Beispiel: 
*) com.petpet.c3po.adaptor.rules.FormatVersionResolutionRule

	Call Hierarchy:
	erstellt in 
		com.petpet.c3po.controller.Controller.getRules()
	verwendet/aufgerufen in 
		com.petpet.c3po.controller.Controller.startJobs(String, int, Map<String, Object>)
		=> startet multithreaded Abarbeitung mittels FITS- oder TIKAAdaptor

Der FITS Adapter verwendet einen Apache Commons Digester, um das XML File zu parsen und auf Basis definierter Regeln 
	gewisse Events zu triggern. (Siehe http://commons.apache.org/proper/commons-digester/guide/core.html#doc.Rules)
In der getElements Methode wird ein DigesterContext Objekt auf den Digesterstack gepusht und die aktuelle 
	"metadata" (=XML Stream) bearbeitet. Die Rules des Adaptors werden verwendet, um die Parameter/Daten im XML File
	in Java Objekte und Properties des DigesterContexts zu transformieren.
Nachdem der DigesterContext komplett aus dem XML geparst wurde, wird das Postprocessing durchgeführt.
*) Dem Context.Element werden die Context.Values als Metadaten übergeben,
*) die Collection (=Target DB) gesetzt,
*) wenn gewünscht (FITSAdaptor.inferDate) können Datumswerte abgeleitet werden
*) zuletzt werden die Postprocessing-Rules angewandt. (!!)


Idee:
	Eine generische, Konfigurierbare Rules, die ihrerseits aus z.B. XML generiert wird.
	Die Rule erlaubt es, auf gewisse Parameter in Elementen zu achten und dadurch z.B. Werte zu ändern. 
	Im Prinzip einfache Wenn-Dann-Regeln, die auf einzelne conflicting Properties definiert werden 
	z.B.
		(siehe /c3po-core/src/test/resources/fits.xml)
		* property: identification.identity.version
		* wenn mimetype = application/pdf
		* und conflictingValues.containsOneOf = ("1.3", "1.4")
		* und conflictingValues.containsOneOf = ("1.3", "1.4")
		* und conflictingTools.containsAll = ("Jhove", "file utility") 
		* und conflictingTools.contains = (name "Jhove", version > "1.4") 
		* und assertEquals(filestatus.valid, "true")
		* und assertConflicts(some.other.attribute)
		* und ... (test more properties)
		* resolve:	useValueOfTool("Jhove")
			oder	ignoreValueOfTool("file utility")   // könnte einen Re-Check auf Conflict erlauben
			
	die conditions sollten schachtelbar sein (and/or)
	Um Nachvollziehbarkeit zu gewährleisten wäre es hilfreich, die Änderungen am Element zu loggen
		* welche rule/resolution angewendet wurde (name/id der rule, rule muss in DB persistiert werden)
			Die Reihenfolge könnte essentiell sein, wenn eine Rule erst funktioniert, nachdem eine andere fertig ist!
			z.B. eine Rule bereinigt die Format-Version, die dann einer anderen erlaubt, korrekt auszuwerten
		* welche werte wurden "gelöscht" (in wahrheit ist ein useValueOfTool nur ein removeAllOthers)
		
	Dadurch ließen sich auf Auswertungen über die Nützlichkeit der Rules machen und man könnte sie rückgängig machen
		oder stichprobenweise kontrollieren.